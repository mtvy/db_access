// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: database.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	GetDb(ctx context.Context, in *GetDbRequest, opts ...grpc.CallOption) (*GetDbResponse, error)
	InsertDb(ctx context.Context, in *InsertDbRequest, opts ...grpc.CallOption) (*InsertDbResponse, error)
	DeleteDb(ctx context.Context, in *DeleteDbRequest, opts ...grpc.CallOption) (*DeleteDbResponse, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) GetDb(ctx context.Context, in *GetDbRequest, opts ...grpc.CallOption) (*GetDbResponse, error) {
	out := new(GetDbResponse)
	err := c.cc.Invoke(ctx, "/api.Database/GetDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) InsertDb(ctx context.Context, in *InsertDbRequest, opts ...grpc.CallOption) (*InsertDbResponse, error) {
	out := new(InsertDbResponse)
	err := c.cc.Invoke(ctx, "/api.Database/InsertDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) DeleteDb(ctx context.Context, in *DeleteDbRequest, opts ...grpc.CallOption) (*DeleteDbResponse, error) {
	out := new(DeleteDbResponse)
	err := c.cc.Invoke(ctx, "/api.Database/DeleteDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility
type DatabaseServer interface {
	GetDb(context.Context, *GetDbRequest) (*GetDbResponse, error)
	InsertDb(context.Context, *InsertDbRequest) (*InsertDbResponse, error)
	DeleteDb(context.Context, *DeleteDbRequest) (*DeleteDbResponse, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (UnimplementedDatabaseServer) GetDb(context.Context, *GetDbRequest) (*GetDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDb not implemented")
}
func (UnimplementedDatabaseServer) InsertDb(context.Context, *InsertDbRequest) (*InsertDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDb not implemented")
}
func (UnimplementedDatabaseServer) DeleteDb(context.Context, *DeleteDbRequest) (*DeleteDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDb not implemented")
}
func (UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_GetDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Database/GetDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetDb(ctx, req.(*GetDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_InsertDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).InsertDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Database/InsertDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).InsertDb(ctx, req.(*InsertDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_DeleteDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).DeleteDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Database/DeleteDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).DeleteDb(ctx, req.(*DeleteDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDb",
			Handler:    _Database_GetDb_Handler,
		},
		{
			MethodName: "InsertDb",
			Handler:    _Database_InsertDb_Handler,
		},
		{
			MethodName: "DeleteDb",
			Handler:    _Database_DeleteDb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database.proto",
}
